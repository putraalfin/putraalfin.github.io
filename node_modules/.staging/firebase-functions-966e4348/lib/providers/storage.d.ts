import { CloudFunction, EventContext } from '../cloud-functions';
import { DeploymentOptions } from '../function-configuration';
/** @hidden */
export declare const provider = "google.storage";
/** @hidden */
export declare const service = "storage.googleapis.com";
/**
 * Registers a Cloud Function scoped to a specific storage bucket.
 *
 * @param bucket Name of the bucket to which this Cloud Function is
 *   scoped.
 *
 * @return Storage bucket builder interface.
 */
export declare function bucket(bucket?: string): BucketBuilder;
/**
 * Registers a Cloud Function scoped to the default storage bucket for the
 * project.
 *
 * @return Storage object builder interface.
 */
export declare function object(): ObjectBuilder;
/** @hidden */
export declare function _bucketWithOptions(options: DeploymentOptions, bucket?: string): BucketBuilder;
/** @hidden */
export declare function _objectWithOptions(options: DeploymentOptions): ObjectBuilder;
/**
 * The Google Cloud Storage bucket builder interface.
 *
 * Access via [`functions.storage.bucket()`](providers_storage_.html#bucket).
 */
export declare class BucketBuilder {
    private triggerResource;
    private options;
    /** @hidden */
    constructor(triggerResource: () => string, options: DeploymentOptions);
    /**
     * Event handler which fires every time a Google Cloud Storage change occurs.
     *
     * @return Storage object builder interface scoped to the specified storage
     *   bucket.
     */
    object(): ObjectBuilder;
}
/**
 * The Google Cloud Storage object builder interface.
 *
 * Access via [`functions.storage.object()`](providers_storage_.html#object).
 */
export declare class ObjectBuilder {
    private triggerResource;
    private options;
    /** @hidden */
    constructor(triggerResource: () => string, options: DeploymentOptions);
    /** @hidden */
    onChange(handler: any): Error;
    /**
     * Event handler sent only when a bucket has enabled object versioning.
     * This event indicates that the live version of an object has become an
     * archived version, either because it was archived or because it was
     * overwritten by the upload of an object of the same name.
     *
     * @param handler Event handler which is run every time a Google Cloud Storage
     *   archival occurs.
     *
     * @return A Cloud Function which you can export and deploy.
     */
    onArchive(handler: (object: ObjectMetadata, context: EventContext) => PromiseLike<any> | any): CloudFunction<ObjectMetadata>;
    /**
     * Event handler which fires every time a Google Cloud Storage deletion occurs.
     *
     * Sent when an object has been permanently deleted. This includes objects
     * that are overwritten or are deleted as part of the bucket's lifecycle
     * configuration. For buckets with object versioning enabled, this is not
     * sent when an object is archived, even if archival occurs
     * via the `storage.objects.delete` method.
     *
     * @param handler Event handler which is run every time a Google Cloud Storage
     *   deletion occurs.
     *
     * @return A Cloud Function which you can export and deploy.
     */
    onDelete(handler: (object: ObjectMetadata, context: EventContext) => PromiseLike<any> | any): CloudFunction<ObjectMetadata>;
    /**
     * Event handler which fires every time a Google Cloud Storage object
     * creation occurs.
     *
     * Sent when a new object (or a new generation of an existing object)
     * is successfully created in the bucket. This includes copying or rewriting
     * an existing object. A failed upload does not trigger this event.
     *
     * @param handler Event handler which is run every time a Google Cloud Storage
     *   object creation occurs.
     *
     * @return A Cloud Function which you can export and deploy.
     */
    onFinalize(handler: (object: ObjectMetadata, context: EventContext) => PromiseLike<any> | any): CloudFunction<ObjectMetadata>;
    /**
     * Event handler which fires every time the metadata of an existing object
     * changes.
     *
     * @param handler Event handler which is run every time a Google Cloud Storage
     *   metadata update occurs.
     *
     * @return A Cloud Function which you can export and deploy.
     */
    onMetadataUpdate(handler: (object: ObjectMetadata, context: EventContext) => PromiseLike<any> | any): CloudFunction<ObjectMetadata>;
    /** @hidden */
    private onOperation;
}
/** Interface representing a Google Google Cloud Storage object metadata object. */
export interface ObjectMetadata {
    /** The kind of the object, which is always `storage#object`. */
    kind: string;
    /**
     * The ID of the object, including the bucket name, object name, and
     * generation number.
     */
    id: string;
    /** Storage bucket that contains the object. */
    bucket: string;
    /** Storage class of the object. */
    storageClass: string;
    /**
     * The value of the `Content-Length` header, used to determine  the length of
     * the object data in bytes.
     */
    size: string;
    /** The creation time of the object in RFC 3339 format. */
    timeCreated: string;
    /**
     * The modification time of the object metadata in RFC 3339 format.
     */
    update