"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../command");
const logger_1 = require("../logger");
const projectUtils_1 = require("../projectUtils");
const secretManager_1 = require("../gcp/secretManager");
const prompt_1 = require("../prompt");
const secrets = require("../functions/secrets");
exports.default = new command_1.Command("functions:secrets:destroy <KEY>[@version]")
    .description("Destroy a secret. Defaults to destroying the latest version.")
    .withForce("Destroys a secret without confirmation.")
    .action(async (key, options) => {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    let [name, version] = key.split("@");
    if (!version) {
        version = "latest";
    }
    const sv = await (0, secretManager_1.getSecretVersion)(projectId, name, version);
    if (!options.force) {
        const confirm = await (0, prompt_1.promptOnce)({
            name: "destroy",
            type: "confirm",
            default: true,
            message: `Are you sure you want to destroy ${sv.secret.name}@${sv.versionId}`,
        }, options);
        if (!confirm) {
            return;
        }
    }
    await (0, secretManager_1.destroySecretVersion)(projectId, name, version);
    logger_1.logger.info(`Destroyed secret version ${name}@${sv.versionId}`);
    const secret = await (0, secretManager_1.getSecret)(projectId, name);
    if (secrets.isFirebaseManaged(secret)) {
        const versions = await (0, secretManager_1.listSecretVersions)(projectId, name);
        if (versions.filter((v) => v.state === "ENABLED").length === 0) {
            logger_1.logger.info(`No active secret versions left. Destroying secret ${name}`);
            await (0, secretManager_1.deleteSecret)(projectId, name);
        }
    }
});
